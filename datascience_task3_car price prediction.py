# -*- coding: utf-8 -*-
"""datascience_task3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15iBc2HD8vDJTrr5yXlBfnQ2HiMR-lNCF
"""

import pandas as pd # graphical illustaration and data manupulation
import numpy as np  # niumerical python operation
import matplotlib.pyplot as plt # for graphical illustration
from google.colab import files  # to  import files from the system
from sklearn.model_selection import train_test_split #tools for data mining and data analysis, and is built on NumPy, SciPy, and matplotlib.is designed to interoperate with the Python numerical and scientific libraries.
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import seaborn as sns

uploaded = files.upload()

data = pd.read_csv('car data.csv')

print(data.head()) # Display the first few rows of the dataset

print(data.info()) # Display basic information about the dataset

print(data.isnull().sum()) #defines the null values if any

data = pd.get_dummies(data, drop_first=True) # Encode categorical variables

# Define the features (X) and the target (y)
X = data.drop('Selling_Price', axis=1) # which defines known value
y = data['Selling_Price']              # which defines the target variable helps to predict the model

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

""" Standardize the features"""

# Standardize the features helps to have equal nor of variables for plotting and which allows to  have the data standr
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Train a linear regression model
model = LinearRegression()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print(f'Mean Squared Error: {mse}')
print(f'R-squared: {r2}')

plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred)
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red', linewidth=2)
plt.xlabel('True Values')
plt.ylabel('Predicted Values')
plt.title('True vs Predicted Car Prices')
plt.show()